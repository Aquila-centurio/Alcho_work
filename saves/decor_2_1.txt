// -------------Декораторы для контейнера на основе связанного списка--------------
//Декоратор сортировки по названию
class ListAlcoholNameSortDecorator {
private:
    ListAlcohol& container;

public:
    ListAlcoholNameSortDecorator(ListAlcohol& cont) : container(cont) {}

    void sortByName() {
    // Функция сравнения для сортировки по названию
    auto compareName = [](const Node* a, const Node* b) {
        return a->drink->getName() < b->drink->getName();
    };

    // Создаем временный вектор указателей на узлы
    std::vector<Node*> tempNodes;

    // Заполняем временный вектор узлами из списка
    Node* temp = container.getHead();
    while (temp) {
        tempNodes.push_back(temp);
        temp = temp->next;
    }

    // Сортируем временный вектор узлов
    std::sort(tempNodes.begin(), tempNodes.end(), compareName);

    // Перестраиваем список на основе отсортированного временного вектора
    Node* prev = nullptr;
    for (size_t i = 0; i < tempNodes.size(); ++i) {
        if (prev) {
            prev->next = tempNodes[i];
        } else {
            container.updateList(tempNodes[i]);
        }
        prev = tempNodes[i];
    }
    if (prev) {
        prev->next = nullptr;
    }
}

};


// Контейнер на основе связанного списка
struct Node {
        AlcoholDrink* drink;
        Node* next;
        Node(AlcoholDrink* _drink) : drink(_drink), next(nullptr) {} // Конструктор узла
    };

class ListAlcohol : public AlcoholContainer {
private:
    
    Node* head; // Указатель на начало списка

public:
    ListAlcohol() : head(nullptr) {} // Конструктор
     Node* getHead() const {
        return head;
    }
    void updateList(Node* newHead) {
        head = newHead;
    }
    void addDrink(AlcoholDrink* drink) override {
        // При пустом списке создаем новый узел, при наличии перемещаемся в конец
        if (!head) {
            head = new Node(drink);
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = new Node(drink);
        }
    }

    void removeDrink(const string& drinkName) override {
        Node* curr = head;
        Node* prev = nullptr;
        while (curr) {
            if (curr->drink->getName() == drinkName) {
                if (prev) {
                    prev->next = curr->next;
                } else {
                    head = curr->next;
                }
                delete curr->drink;
                delete curr;
                break;
            }
            prev = curr;
            curr = curr->next;
        }
    }

    void displayContents() const override {
        Node* temp = head;
        while (temp) {
            temp->drink->displayInfo();
            temp = temp->next;
        }
    }

    AlcoholDrink* findDrink(const string& drinkName) const override {
        Node* temp = head;
        while (temp) {
            if (temp->drink->getName() == drinkName) {
                return temp->drink;
            }
            temp = temp->next;
        }
        return nullptr;
    }

    ~ListAlcohol() { // Деструктор для узлов
        Node* temp = head;
        while (temp) {
            Node* next = temp->next;
            delete temp->drink;
            delete temp;
            temp = next;
        }
    }
};

// Итератор для ListAlcohol
class ListAlcoholIterator {
private:
    struct Node {
        AlcoholDrink* drink;
        Node* next;
        Node(AlcoholDrink* _drink) : drink(_drink), next(nullptr) {} // Конструктор узла
    };
    Node* current; // Текущий элемент

public:
    ListAlcoholIterator(Node* start) : current(start) {}

    bool hasNext() const {
        return current != nullptr;
    }

    AlcoholDrink* getNext() {
        if (hasNext()) {
            AlcoholDrink* drink = current->drink;
            current = current->next;
            return drink;
        }
        return nullptr;
    }
};

